<html xmlns:deltaxml="http://www.deltaxml.com/ns/well-formed-delta-v1" xmlns="http://www.w3.org/1999/xhtml" xmlns:dxx="http://www.deltaxml.com/ns/xml-namespaced-attribute" xmlns:dxa="http://www.deltaxml.com/ns/non-namespaced-attribute" deltaxml:deltaV2="A!=B" deltaxml:version="2.0" deltaxml:content-type="full-context">
   <head deltaxml:deltaV2="A=B"/>
   <body deltaxml:deltaV2="A!=B">
      <article deltaxml:deltaV2="A!=B" id="R.1" class="article">
         <header deltaxml:deltaV2="A=B" class="article-titlepage">
            <h2>Unit Test: programlisting.005</h2>
            <h3>A programlisting within a table</h3>
            <div class="author">
               <h3>
                  <span class="personname">
                     <span class="firstname">Michael</span>
                     <span class="surname">Smith</span>
                  </span>
               </h3>
            </div>
         </header>
         <figure deltaxml:deltaV2="A!=B" id="R.1.2" class="table-wrapper">
            <div deltaxml:deltaV2="A=B" class="title">Table 1. Lisp function</div>
            <div deltaxml:deltaV2="A!=B" class="table">
               <table deltaxml:deltaV2="A!=B" border="0" summary="Table 1. Lisp function"><deltaxml:attributes deltaxml:deltaV2="A!=B"><dxa:style deltaxml:deltaV2="A!=B"><deltaxml:attributeValue deltaxml:deltaV2="A">border-collapse: collapse;border-top: 0.5pt solid ; border-bottom: 0.5pt solid ; border-left: 0.5pt solid ; border-right: 0.5pt solid ; </deltaxml:attributeValue><deltaxml:attributeValue deltaxml:deltaV2="B">border-collapse: collapse;border-top: 1px solid ; border-bottom: 1px solid ; border-left: 1px solid ; border-right: 1px solid ; </deltaxml:attributeValue></dxa:style></deltaxml:attributes>
                  <colgroup deltaxml:deltaV2="A=B">
                     <col class="tcol1" width="100%"/>
                  </colgroup>
                  <tbody deltaxml:deltaV2="A!=B">
                     <tr deltaxml:deltaV2="A!=B">
                        <td deltaxml:deltaV2="A!=B">
                           <div deltaxml:deltaV2="A!=B"><deltaxml:attributes deltaxml:deltaV2="A!=B"><dxa:class deltaxml:deltaV2="A!=B"><deltaxml:attributeValue deltaxml:deltaV2="A">programlisting</deltaxml:attributeValue><deltaxml:attributeValue deltaxml:deltaV2="B">numbered-verbatim</deltaxml:attributeValue></dxa:class></deltaxml:attributes>
                              <pre deltaxml:deltaV2="A" class="lisp">
                                 <span class="linenumber">  1</span>
                                 <span class="linenumber-separator"/>(defun cycle-length (n &amp; (len 1) (top 0))
<span class="linenumber">  2</span>
                                 <span class="linenumber-separator"/>  (cond ((= n 1) (values len top))
<span class="linenumber"/>
                                 <span class="linenumber-separator"/>        ((evenp n) (cycle-length (ash n -1) (1+ len) (max top n)))
<span class="linenumber">  4</span>
                                 <span class="linenumber-separator"/>        (t (let ((next (1+ (* 3 n))))
<span class="linenumber"/>
                                 <span class="linenumber-separator"/>             (cycle-length next (1+ len) (max top next))))))</pre><table deltaxml:deltaV2="B" border="0">
                                 <tr>
                                    <td align="right" valign="top">
                                       <pre class="line-numbers">
                                          <code class="line-number">1</code>
                                          <code class="line-number">2</code>
                                          <code class="line-number">3</code>
                                          <code class="line-number">4</code>
                                          <code class="line-number">5</code>
                                       </pre>
                                    </td>
                                    <td valign="top">
                                       <pre class="programlisting">
                                          <code>(defun cycle-length (n &amp; (len 1) (top 0))
  (cond ((= n 1) (values len top))
        ((evenp n) (cycle-length (ash n -1) (1+ len) (max top n)))
        (t (let ((next (1+ (* 3 n))))
             (cycle-length next (1+ len) (max top next))))))</code>
                                       </pre>
                                    </td>
                                 </tr>
                              </table>
                           </div>
                        </td>
                     </tr>
                  </tbody>
               </table>
            </div>
         </figure>
      </article>
   </body>
</html>